import { DEBUG_0, DEBUG_1, DEBUG_2, DEBUG_3, DEBUG_4, DEBUG_5, DEBUG_6, DEBUG_7, DEBUG_8, DEBUG_9, DEBUG_10, DEBUG_11, DEBUG_12, DEBUG_13, DEBUG_14, DEBUG_15, DEBUG_16, DEBUG_17, DEBUG_18, DEBUG_19, DEBUG_20, DEBUG_21, DEBUG_22, DEBUG_23, DEBUG_24, DEBUG_25, DEBUG_31, DEBUG_32, DEBUG_33, DEBUG_36, DEBUG_42, DEBUG_43, DEBUG_44, DEBUG_45, DEBUG_46, DEBUG_47, DEBUG_48, DEBUG_49, DEBUG_50, DEBUG_51 } from './codesConstants';

export const codesDebug: [number, string][] = [
  [DEBUG_0, 'splitio-engine:combiner => [andCombiner] evaluates to %s'],
  [DEBUG_1, 'splitio-engine:combiner => Treatment found: %s'],
  [DEBUG_2, 'splitio-engine:combiner => All predicates evaluated, no treatment found.'],
  [DEBUG_3, 'splitio-engine => [engine] using algo \'murmur\' bucket %s for key %s using seed %s - treatment %s'],
  [DEBUG_4, 'splitio-engine:matcher => [allMatcher] is always true'],
  [DEBUG_5, 'splitio-engine:matcher => [betweenMatcher] is %s between %s and %s? %s'],
  [DEBUG_6, 'splitio-engine:matcher => [booleanMatcher] %s === %s'],
  [DEBUG_7, 'splitio-engine:matcher => [containsAllMatcher] %s contains all elements of %s? %s'],
  [DEBUG_8, 'splitio-engine:matcher => [containsAnyMatcher] %s contains at least an element of %s? %s'],
  [DEBUG_9, 'splitio-engine:matcher => [containsStringMatcher] %s contains %s? %s'],
  [DEBUG_10, 'splitio-engine:matcher => [dependencyMatcher] Parent split "%s" evaluated to "%s" with label "%s". %s evaluated treatment is part of [%s] ? %s.'],
  [DEBUG_11, 'splitio-engine:matcher => [dependencyMatcher] will evaluate parent split: "%s" with key: %s %s'],
  [DEBUG_12, 'splitio-engine:matcher => [equalToMatcher] is %s equal to %s? %s'],
  [DEBUG_13, 'splitio-engine:matcher => [equalToSetMatcher] is %s equal to set %s? %s'],
  [DEBUG_14, 'splitio-engine:matcher => [endsWithMatcher] %s ends with %s? %s'],
  [DEBUG_15, 'splitio-engine:matcher => [greaterThanEqualMatcher] is %s greater than %s? %s'],
  [DEBUG_16, 'splitio-engine:matcher => [lessThanEqualMatcher] is %s less than %s? %s'],
  [DEBUG_17, 'splitio-engine:matcher => [partOfMatcher] %s is part of %s? %s'],
  [DEBUG_18, 'splitio-engine:matcher => [asyncSegmentMatcher] evaluated %s / %s => %s'],
  [DEBUG_19, 'splitio-engine:matcher => [segmentMatcher] evaluated %s / %s => %s'],
  [DEBUG_20, 'splitio-engine:matcher => [stringMatcher] does %s matches with %s? %s'],
  [DEBUG_21, 'splitio-engine:matcher => [stringMatcher] %s is an invalid regex'],
  [DEBUG_22, 'splitio-engine:matcher => [startsWithMatcher] %s starts with %s? %s'],
  [DEBUG_23, 'splitio-engine:matcher => [whitelistMatcher] evaluated %s in [%s] => %s'],
  [DEBUG_24, 'splitio-engine:value => Extracted attribute [%s], [%s] will be used for matching.'],
  [DEBUG_25, 'splitio-engine:sanitize => Attempted to sanitize [%s] which should be of type [%s]. \n Sanitized and processed value => [%s]'],
  [DEBUG_31, 'splitio => Retrieving SDK client.'],
  [DEBUG_32, 'splitio => Retrieving default SDK client.'], // @TODO remove and use 'splitio => Retrieving SDK client.'
  [DEBUG_33, 'splitio => Retrieving existing SDK client.'],
  [DEBUG_36, 'splitio-producer:offline => Splits data: '],
  [DEBUG_42, 'splitio-sync:split-changes => Spin up split update using since = %s'],
  [DEBUG_43, 'splitio-sync:split-changes => New splits %s'],
  [DEBUG_44, 'splitio-sync:split-changes => Removed splits %s'],
  [DEBUG_45, 'splitio-sync:split-changes => Segment names collected %s'],
  [DEBUG_46, 'splitio-sync:sse-handler => New SSE message received, with data: %s.'],
  [DEBUG_47, 'splitio-sync:task => Starting %s. Running each %s millis'],
  [DEBUG_48, 'splitio-sync:task => Running %s'],
  [DEBUG_49, 'splitio-sync:task => Stopping %s'],
  [DEBUG_50, 'splitio-client:impressions-tracker => Successfully stored %s impression%s.'],
  [DEBUG_51, 'Factory instantiation: splits filtering criteria is \'%s\'.']
];
